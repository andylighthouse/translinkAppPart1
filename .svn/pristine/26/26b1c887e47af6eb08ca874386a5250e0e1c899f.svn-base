package ca.ubc.cs.cpsc210.translink.parsers;

import ca.ubc.cs.cpsc210.translink.model.Arrival;
import ca.ubc.cs.cpsc210.translink.model.Route;
import ca.ubc.cs.cpsc210.translink.model.RouteManager;
import ca.ubc.cs.cpsc210.translink.model.Stop;
import ca.ubc.cs.cpsc210.translink.parsers.exception.ArrivalsDataMissingException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * A parser for the data returned by the Translink arrivals at a stop query
 */
public class ArrivalsParser {

    /**
     * Parse arrivals from JSON response produced by TransLink query.  All parsed arrivals are
     * added to the given stop assuming that corresponding JSON object has a RouteNo: and an
     * array of Schedules:
     * Each schedule must have an ExpectedCountdown, ScheduleStatus, and Destination.  If
     * any of the aforementioned elements is missing, the arrival is not added to the stop.
     *
     * @param stop         stop to which parsed arrivals are to be added
     * @param jsonResponse the JSON response produced by Translink
     * @throws JSONException                when:
     *                                      <ul>
     *                                      <li>JSON response does not have expected format (JSON syntax problem)</li>
     *                                      <li>JSON response is not an array</li>
     *                                      </ul>
     * @throws ArrivalsDataMissingException when no arrivals are found in the reply
     */
    public static void parseArrivals(Stop stop, String jsonResponse) throws JSONException, ArrivalsDataMissingException {
        // TODO: Task 4: Implement this method
//        System.out.println(stop);
//        System.out.println("break");
//        System.out.println(jsonResponse);

        JSONArray arrivals = new JSONArray(jsonResponse);
        //System.out.println(arrivals);
        //JSONObject arrival = arrivals.getJSONObject(0);
        //System.out.println(arrival);
        //System.out.println(arrival.length());
        //System.out.println(arrivals.length());
        //parseArrival(stop, arrival);

        for (int index = 0; index < arrivals.length(); index++) {
            JSONObject currentArrival = arrivals.getJSONObject(index);
            //parseArrival(stop, currentArrival);
            //System.out.println(currentArrival);
            try {
                parseArrival(stop, currentArrival);
            } catch (ArrivalsDataMissingException e) {
                e.getMessage();
            }

        }
    }

    private static void parseArrival(Stop stop, JSONObject arrival) throws JSONException, ArrivalsDataMissingException {
        //System.out.println(arrival);
        //System.out.println(stop);
        String routeNumber = arrival.getString("RouteNo");
        JSONArray schedules = arrival.getJSONArray("Schedules");
        //System.out.println(schedules);
        //JSONObject schedule = schedules.getJSONObject(0);
        //System.out.println(schedule);
        Route currentRoute = RouteManager.getInstance().getRouteWithNumber(routeNumber);

        for (int i = 0; i < schedules.length(); i++) {
            JSONObject schedule = schedules.getJSONObject(i);
            if (schedule.has("ExpectedCountdown") && schedule.has("Destination") && schedule.has("ScheduleStatus")) {
                int expectedCountdown = schedule.getInt("ExpectedCountdown");
                String destination = schedule.getString("Destination");
                String scheduleStatus = schedule.getString("ScheduleStatus");

                Arrival currentArrival = new Arrival(expectedCountdown, destination, currentRoute);
                currentArrival.setStatus(scheduleStatus);
                stop.addArrival(currentArrival);
            } else {
                throw new ArrivalsDataMissingException("Missing arrival data");
            }
        }
    }
}
