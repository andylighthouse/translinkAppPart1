package ca.ubc.cs.cpsc210.translink.util;

import java.awt.geom.Line2D;

/**
 * Compute relationships between points, lines, and rectangles represented by LatLon objects
 */
public class Geometry {
    /**
     * Return true if the point is inside of, or on the boundary of, the rectangle formed by northWest and southeast
     * @param northWest         the coordinate of the north west corner of the rectangle
     * @param southEast         the coordinate of the south east corner of the rectangle
     * @param point             the point in question
     * @return                  true if the point is on the boundary or inside the rectangle
     */
    public static boolean rectangleContainsPoint(LatLon northWest, LatLon southEast, LatLon point) {
        // TODO: Task 5: Implement this method

        if(between(northWest.getLongitude(), southEast.getLongitude(), point.getLongitude()) &&
                between(southEast.getLatitude(), northWest.getLatitude(), point.getLatitude()))
        {
            return true;
        }

        return false;

//		double x = northWest.getLongitude();
//		double y = northWest.getLatitude();
//		double dx = southEast.getLongitude();
//		double dy = southEast.getLatitude();
//		double px = point.getLongitude();
//		double py = point.getLatitude();
//		Rectangle2D tempRect = new Rectangle.Double(x, y, dx, dy);
//		return tempRect.contains(px, py);
    }

    /**
     * Return true if the rectangle intersects the line
     * @param northWest         the coordinate of the north west corner of the rectangle
     * @param southEast         the coordinate of the south east corner of the rectangle
     * @param src               one end of the line in question
     * @param dst               the other end of the line in question
     * @return                  true if any point on the line is on the boundary or inside the rectangle
     */
    public static boolean rectangleIntersectsLine(LatLon northWest, LatLon southEast, LatLon src, LatLon dst) {
        // TODO: Tasks 5: Implement this method

//		double x0 = northWest.getLongitude();
//		double y0 = northWest.getLatitude();
////		double dx = Math.abs(southEast.getLongitude()-northWest.getLongitude());
////		double dy = Math.abs(northWest.getLatitude()-southEast.getLatitude());
//
//		double x1 = src.getLongitude();
//		double y1 = src.getLatitude();
//		double x2 = dst.getLongitude();
//		double y2 = dst.getLatitude();
////		Rectangle2D tempRect = new Rectangle.Double(x0, y0, dx, dy);
////		Line2D tempLine = new Line2D.Double(x1, y1, x2, y2);
////		return tempRect.intersectsLine(tempLine);


        double x0 = northWest.getLongitude();
        double y0 = northWest.getLatitude();
        double x1 = southEast.getLongitude();
        double y1 = southEast.getLatitude();

        double x2 = src.getLongitude();
        double y2 = src.getLatitude();
        double x3 = dst.getLongitude();
        double y3 = dst.getLatitude();

        Line2D l1 = new Line2D.Double(x0, y0, x0, y1); //vert left
        Line2D l2 = new Line2D.Double(x1, y0, x1, y1); //vert right
        Line2D l3 = new Line2D.Double(x0, y0, x1, y0); //horiz top
        Line2D l4 = new Line2D.Double(x0, y1, x1, y1); //horiz bottom

//		boolean intersects

        Line2D lc = new Line2D.Double(x2, y2, x3, y3); //test critical line
        if(l1.intersectsLine(lc) || l2.intersectsLine(lc) || l3.intersectsLine(lc) || l4.intersectsLine(lc))
        {
            return true;
        }

        //check middle of rectangle
        return rectangleContainsPoint(northWest, southEast, src);
    }

    /**
     * A utility method that you might find helpful in implementing the two previous methods
     * Return true if x is >= lwb and <= upb
     * @param lwb      the lower boundary
     * @param upb      the upper boundary
     * @param x         the value in question
     * @return          true if x is >= lwb and <= upb
     */
    private static boolean between(double lwb, double upb, double x) {
        return Math.min(lwb, upb) <= x && x <= Math.max(upb, lwb);
    }
}
